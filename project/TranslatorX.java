/** Yashwanth Dahanayake* yd322@drexel.edu* CS338:GUI, Final Project**/// Imported Libraries import com.sun.speech.freetts.Voice;import com.sun.speech.freetts.VoiceManager;import java.awt.GridLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import javax.swing.*;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Component;import java.io.File;import java.io.IOException;import java.net.URL;import javax.media.*;import javax.swing.JFrame;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.event.ListSelectionEvent;import javax.swing.event.ListSelectionListener; // The TranslatorX class acts as the most important and central class in this GUI program.// The main JFrame of this program is declared as a global variable.// The initializations for the Buttons, Display Panels, and Fields used in the GUI.public class TranslatorX        {                 // JFRAMES and JPANELS       public static JFrame frame = new JFrame("Translator X");   public static JPanel panel1 = new JPanel ();   public static JPanel panel2 = new JPanel ();   public static JPanel panel3 = new JPanel ();   public static JFrame frame2 = new JFrame("Settings");   public static JPanel panel1_2 = new JPanel ();   public static JPanel panel2_2 = new JPanel ();   public static JPanel panel3_2 = new JPanel ();      // BUTTONS      public static JButton translate_button = new JButton ("TRANSLATE");   public static JButton enable_audio_button = new JButton ("Disable Audio");   public static JButton enable_asl_button = new JButton ("Disable ASL");   // TEXT FIELDS    public static  JTextField user_input_english = new JTextField(15);        // OTHER VARIABLES      public static  Boolean audio_enabled = true ;   public static  Boolean asl_enabled = true ;      public void initialize_main_panels(){                                 // MAIN FRAME                                     frame.getContentPane().add (panel1, BorderLayout.NORTH);                                                                                                   // User Text Input Panel (To be inserted in English)                               panel2.setBorder(BorderFactory.createTitledBorder("User Text Input"));                panel2.add(new JLabel ("\tEnter Text to be Translated Here\t\n"));                  frame.getContentPane().add (panel2, BorderLayout.CENTER);                                                                                // Translated Output (Shown in American Sign Language Diagrams)                               panel3.setBorder(BorderFactory.createTitledBorder("Translation in ASL"));                panel3.add(new JLabel ("\tTranslated Output shown in ASL\t"));                  frame.getContentPane().add (panel3, BorderLayout.SOUTH);                                                                                              // SETTINGS FRAME                                // Enable / Disable Audio (Speech) and ASL Translation Panel                                    panel1_2.setBorder(BorderFactory.createTitledBorder("Enable / Disable"));                  panel1_2.setLayout(new GridLayout(0, 2));                // Enable / Disable Buttons for Audio and ASL                                panel1_2.add(enable_audio_button);                panel1_2.add(enable_asl_button);                                       // When ENABLE AUDIO Button Is Pressed - Audio Tanslation is Disabled / Enabled and the Text in the Button is changed accordingly                      enable_audio_button.addActionListener(new ActionListener() {                          @Override            public void actionPerformed(ActionEvent e) {                           if (audio_enabled == true){                enable_audio_button.setText("Enable Audio");                enable_audio_button.setForeground(Color.red);                audio_enabled = false;                }                                else                {                                enable_audio_button.setText("Disable Audio");                enable_audio_button.setForeground(Color.black);                audio_enabled = true;                                    }                                }                  });                                // When ENABLE ASL Button Is Pressed - ASL Tanslation is Disabled / Enabled and the Text in the Button is changed accordingly                      enable_asl_button.addActionListener(new ActionListener() {                          @Override            public void actionPerformed(ActionEvent e) {                           if (asl_enabled == true){                enable_asl_button.setText("Enable ASL");                enable_asl_button.setForeground(Color.red);                asl_enabled = false;                }                                else                {                                enable_asl_button.setText("Disable ASL");                enable_asl_button.setForeground(Color.black);                asl_enabled = true;                                    }                                }                  });                                   frame2.getContentPane().add (panel1_2, BorderLayout.NORTH);                                                                                                                // Words Selection Panel                                    panel2_2.setBorder(BorderFactory.createTitledBorder("Words Selection"));                frame2.getContentPane().add (panel2_2, BorderLayout.CENTER);                panel2.add(user_input_english);                                 // TRANSLATE BUTTON                            // Enabled at Start of Program               translate_button.setEnabled(true);                       // When TRANSLATE Button Is Pressed                      translate_button.addActionListener(new ActionListener() {                          @Override            public void actionPerformed(ActionEvent e) {                                 // Playing Audio Only if User has Enabled Audio Translation                        if (audio_enabled == true){                                 // PLAY TRANSLATED AUDIO (Code / Speech Library borrowed from https://blog.idrsolutions.com/2015/06/how-to-enable-text-to-speech-in-javafx-and-swing-applications/)              VoiceManager speech = VoiceManager.getInstance();        Voice audio = speech.getVoice("kevin16");        audio.allocate();                // Translate User Input's English Text to Audio              audio.speak( user_input_english.getText());        audio.deallocate();            }                                           // PLAY VIDEO - TRANSLATED ASL (Code / JMF Library for the Video Player implementation borrowed from http://stackoverflow.com/questions/17733199/playing-a-media-file-in-a-jframe-java)            // Removing all contents in JPanel which plays the video            panel3.removeAll();                 try{        // Creating New File                URL new_file = new File("videos/" + user_input_english.getText() + ".mov").toURI().toURL();        Player ASL_videoplayer = Manager.createRealizedPlayer(new_file);        Manager.setHint(Manager.LIGHTWEIGHT_RENDERER, true);                // Video displayed to a Component                Component ASL_video = ASL_videoplayer.getVisualComponent();        if ( ASL_video != null )            panel3.add( ASL_video, BorderLayout.CENTER );            frame.getContentPane().add (panel3, BorderLayout.SOUTH);                                       // Playing ASL Video Only If User has Enabled ASL Translation               if (asl_enabled == true){                         ASL_videoplayer.start();               }                                                     // Refreshing panel                panel3.revalidate();                                    // Exception Handling                }    catch ( NoPlayerException noPlayerException ){        JOptionPane.showMessageDialog(null, "The entered word is not supported in 'Translator X'. Please retry. The list of supported words are in the Words Selection List in Settings.");    }    catch ( CannotRealizeException cannotRealizeException ){        JOptionPane.showMessageDialog(null, "Could not realize media player.");    }    catch ( IOException iOException ){        JOptionPane.showMessageDialog(null, "Error reading from the source.");    }                                                }                                     });                                                 // Translate Button added to Panel            panel2.add (translate_button);                            // Selection JList (Code borrowed for the JList implementation from http://www.java2s.com/Tutorials/Java/Swing/JList/Search_item_in_JList_in_Java.htm)            String[] list_of_words = { "abandon", "again", "also", "arise", "ask", "asl", "because", "boy", "but", "can", "come", "deaf", "different", "done", "drive", "eat", "elderly", "email", "excuse", "father", "few", "fine", "fingerspell", "food", "for", "friend", "get", "girl", "give", "good", "have", "he", "hearing", "hello", "help", "home", "how", "if", "intranet", "know", "learner", "like", "little", "live", "man", "many", "me", "meet", "more", "my", "name", "need", "no", "not", "ok", "old", "other", "people", "play", "please", "remember", "same", "say", "school", "see", "send", "she", "should", "slow", "some", "sorry", "take", "tell", "thank", "that", "their", "they", "think", "time", "tired", "toilet", "understand", "use", "wait", "water", "what", "where", "which", "who", "why", "will", "woman", "work", "write", "yes", "you", "your","about", "agree", "answer", "any", "arrive", "bad", "beautiful", "before", "better", "big", "bring", "busy", "buy", "change", "clean", "closing", "cold", "color", "dispatch", "early", "easy", "everyday", "everything", "family", "fast", "follow", "gone", "happy", "hard", "hot", "house", "imply", "inform", "interpreter", "keep", "last", "late", "learn", "leave", "look", "love", "make", "meaning", "month", "morning", "most", "mount", "must", "nearby", "never", "new", "next", "night", "now", "offhand", "ogle", "only", "open", "outside", "picture", "plan", "prefer", "question", "read", "receive", "rest", "run", "show", "sit", "sleep", "something", "sometimes", "start", "stay", "still", "stop", "sufficient", "talk", "teach", "teacher", "than", "thing", "today", "tomorrow", "true", "try", "until", "visit", "walk", "warm", "week", "wrong", "yearlong", "yesterday", "yourself" };            // Creating JList and ScrollPane for the list of words        JList jlist = new JList(list_of_words);    JScrollPane jscrollPane1 = new JScrollPane(jlist);                    panel2_2.setLayout(new GridLayout(0, 1));    panel2_2.add(jscrollPane1);          // Listener which reads the Real-Time User Selected Choice in the List and shows it in the User Input Text Fields (code borrowed from CS338 - Assignment 1)    jlist.addListSelectionListener(new ListSelectionListener() {          @Override        public void valueChanged(ListSelectionEvent user_selected_choice) {                 if (user_selected_choice.getValueIsAdjusting())        {                     String selected_list_value = (String) jlist.getSelectedValue();                System.out.println(selected_list_value);                user_input_english.setText(selected_list_value);                                }                    }            });                   }       }        